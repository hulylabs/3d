use cgmath::Deg;
use library::geometry::alias::{Point, Vector};
use library::geometry::transform::Affine;
use library::objects::material::{Material, MaterialClass};
use library::objects::material_index::MaterialIndex;
use library::scene::container::Container;
use library::sdf::code_generator::SdfRegistrator;
use library::sdf::named_sdf::{NamedSdf, UniqueSdfClassName};
use library::sdf::sdf_box::SdfBox;
use library::sdf::sdf_capped_torus_xy::SdfCappedTorusXy;
use library::sdf::sdf_hex_prism::SdfHexPrism;
use library::sdf::sdf_intersection_smooth::SdfIntersectionSmooth;
use library::sdf::sdf_octahedron::SdfOctahedron;
use library::sdf::sdf_pyramid::SdfPyramid;
use library::sdf::sdf_round_box::SdfRoundBox;
use library::sdf::sdf_round_code::SdfRoundCone;
use library::sdf::sdf_sphere::SdfSphere;
use library::sdf::sdf_subtraction_smooth::SdfSubtractionSmooth;
use library::sdf::sdf_torus_xz::SdfTorusXz;
use library::sdf::sdf_union_smooth::SdfUnionSmooth;
use library::sdf::sdf_vesica_segment::SdfVesicaSegment;
use library::utils::object_uid::ObjectUid;

/* 

This code is 100% generated by anthropic/claude-opus-4 via Huly Coder

*/

pub(super) struct BeautifulSdfClasses {
    // Organic shapes
    pearl: NamedSdf,
    crystal: NamedSdf,
    flower_base: NamedSdf,
    
    // Architectural elements
    pillar: NamedSdf,
    arch: NamedSdf,
    platform: NamedSdf,
    
    // Decorative objects
    gem: NamedSdf,
    ring: NamedSdf,
    sculpture: NamedSdf,
    
    // Natural forms
    pebble: NamedSdf,
    shell: NamedSdf,
    coral: NamedSdf,
}

impl BeautifulSdfClasses {
    #[must_use]
    pub(super) fn new(registrator: &mut SdfRegistrator) -> Self {
        // Pearl - perfect sphere
        let pearl = NamedSdf::new(SdfSphere::new(1.0), UniqueSdfClassName::new("pearl".to_string()));
        registrator.add(&pearl);
        
        // Crystal - octahedron
        let crystal = NamedSdf::new(SdfOctahedron::new(1.0), UniqueSdfClassName::new("crystal".to_string()));
        registrator.add(&crystal);
        
        // Flower base - smooth union of spheres
        let flower_base = NamedSdf::new(
            SdfUnionSmooth::new(
                SdfSphere::new_offset(0.8, Point::new(0.0, 0.0, 0.0)),
                SdfUnionSmooth::new(
                    SdfSphere::new_offset(0.5, Point::new(0.6, 0.0, 0.0)),
                    SdfUnionSmooth::new(
                        SdfSphere::new_offset(0.5, Point::new(-0.3, 0.52, 0.0)),
                        SdfSphere::new_offset(0.5, Point::new(-0.3, -0.52, 0.0)),
                        0.2,
                    ),
                    0.2,
                ),
                0.3,
            ),
            UniqueSdfClassName::new("flower".to_string())
        );
        registrator.add(&flower_base);
        
        // Pillar - rounded cylinder
        let pillar = NamedSdf::new(
            SdfRoundCone::new(0.8, 0.6, 2.0),
            UniqueSdfClassName::new("pillar".to_string())
        );
        registrator.add(&pillar);
        
        // Arch - capped torus
        let arch = NamedSdf::new(
            SdfCappedTorusXy::new(Deg(180.0), 1.5, 0.3),
            UniqueSdfClassName::new("arch".to_string())
        );
        registrator.add(&arch);
        
        // Platform - flat rounded box
        let platform = NamedSdf::new(
            SdfRoundBox::new(Vector::new(2.0, 0.1, 2.0), 0.05),
            UniqueSdfClassName::new("platform".to_string())
        );
        registrator.add(&platform);
        
        // Gem - pyramid
        let gem = NamedSdf::new(SdfPyramid::new(1.0), UniqueSdfClassName::new("gem".to_string()));
        registrator.add(&gem);
        
        // Ring - torus
        let ring = NamedSdf::new(SdfTorusXz::new(1.0, 0.2), UniqueSdfClassName::new("ring".to_string()));
        registrator.add(&ring);
        
        // Sculpture - smooth CSG
        let sculpture_sdf = SdfIntersectionSmooth::new(
            SdfSphere::new(1.0),
            SdfBox::new(Vector::new(0.8, 0.8, 0.8)),
            0.2,
        );
        let sculpture = NamedSdf::new(sculpture_sdf, UniqueSdfClassName::new("sculpture".to_string()));
        registrator.add(&sculpture);
        
        // Pebble - smooth subtraction
        let pebble = NamedSdf::new(
            SdfSubtractionSmooth::new(
                SdfSphere::new(1.0),
                SdfSphere::new_offset(0.8, Point::new(0.7, 0.7, 0.0)),
                0.3,
            ),
            UniqueSdfClassName::new("pebble".to_string())
        );
        registrator.add(&pebble);
        
        // Shell - vesica segment
        let shell = NamedSdf::new(
            SdfVesicaSegment::new(0.4, Point::new(-0.8, 0.0, 0.0), Point::new(0.8, 0.0, 0.0)),
            UniqueSdfClassName::new("shell".to_string())
        );
        registrator.add(&shell);
        
        // Coral - hex prism
        let coral = NamedSdf::new(
            SdfHexPrism::new(0.5, 1.5),
            UniqueSdfClassName::new("coral".to_string())
        );
        registrator.add(&coral);
        
        Self {
            pearl,
            crystal,
            flower_base,
            pillar,
            arch,
            platform,
            gem,
            ring,
            sculpture,
            pebble,
            shell,
            coral,
        }
    }
}

pub(super) struct BeautifulMaterials {
    // Metals with warm tones
    rose_gold: MaterialIndex,
    copper: MaterialIndex,
    brass: MaterialIndex,
    
    // Gemstone materials
    sapphire: MaterialIndex,
    emerald: MaterialIndex,
    amethyst: MaterialIndex,
    ruby: MaterialIndex,
    
    // Natural materials
    marble: MaterialIndex,
    jade: MaterialIndex,
    obsidian: MaterialIndex,
    pearl_material: MaterialIndex,
    
    // Special effects
    opal: MaterialIndex,
    crystal_clear: MaterialIndex,
    
    // Light source
    warm_light: MaterialIndex,
    
    // Scene materials
    velvet_purple: MaterialIndex,
    silk_teal: MaterialIndex,
    matte_coral: MaterialIndex,
}

impl BeautifulMaterials {
    #[must_use]
    pub(super) fn new(scene: &mut Container) -> Self {
        // Rose gold - warm metallic
        let rose_gold = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Mirror)
                .with_albedo(0.96, 0.67, 0.64)
                .with_specular(0.96, 0.67, 0.64)
                .with_specular_strength(0.8)
                .with_roughness(0.05)
        );
        
        // Copper
        let copper = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Mirror)
                .with_albedo(0.72, 0.45, 0.20)
                .with_specular(0.95, 0.64, 0.54)
                .with_specular_strength(0.9)
                .with_roughness(0.1)
        );
        
        // Brass
        let brass = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Mirror)
                .with_albedo(0.71, 0.65, 0.26)
                .with_specular(0.91, 0.78, 0.42)
                .with_specular_strength(0.7)
                .with_roughness(0.15)
        );
        
        // Sapphire - deep blue glass
        let sapphire = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Glass)
                .with_albedo(0.06, 0.32, 0.73)
                .with_refractive_index_eta(1.77)
        );
        
        // Emerald - rich green glass
        let emerald = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Glass)
                .with_albedo(0.07, 0.66, 0.42)
                .with_refractive_index_eta(1.58)
        );
        
        // Amethyst - purple glass
        let amethyst = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Glass)
                .with_albedo(0.60, 0.28, 0.70)
                .with_refractive_index_eta(1.54)
        );
        
        // Ruby - deep red glass
        let ruby = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Glass)
                .with_albedo(0.88, 0.07, 0.37)
                .with_refractive_index_eta(1.76)
        );
        
        // Marble - white with subtle veining
        let marble = scene.materials().add(
            &Material::new()
                .with_albedo(0.95, 0.93, 0.88)
                .with_specular(0.4, 0.4, 0.4)
                .with_specular_strength(0.3)
                .with_roughness(0.2)
        );
        
        // Jade - translucent green
        let jade = scene.materials().add(
            &Material::new()
                .with_albedo(0.31, 0.78, 0.47)
                .with_specular(0.5, 0.8, 0.6)
                .with_specular_strength(0.4)
                .with_roughness(0.1)
        );
        
        // Obsidian - glossy black
        let obsidian = scene.materials().add(
            &Material::new()
                .with_albedo(0.08, 0.08, 0.09)
                .with_specular(0.9, 0.9, 0.9)
                .with_specular_strength(0.95)
                .with_roughness(0.01)
        );
        
        // Pearl material
        let pearl_material = scene.materials().add(
            &Material::new()
                .with_albedo(0.98, 0.96, 0.90)
                .with_specular(0.95, 0.88, 0.80)
                .with_specular_strength(0.6)
                .with_roughness(0.05)
        );
        
        // Opal - iridescent
        let opal = scene.materials().add(
            &Material::new()
                .with_albedo(0.95, 0.95, 0.98)
                .with_specular(0.7, 0.85, 0.95)
                .with_specular_strength(0.8)
                .with_roughness(0.02)
        );
        
        // Crystal clear glass
        let crystal_clear = scene.materials().add(
            &Material::new()
                .with_class(MaterialClass::Glass)
                .with_albedo(0.98, 0.98, 0.98)
                .with_refractive_index_eta(1.5)
        );
        
        // Warm light - sunset glow
        let warm_light = scene.materials().add(
            &Material::new()
                .with_emission(2.5, 2.2, 1.8)
        );
        
        // Velvet purple
        let velvet_purple = scene.materials().add(
            &Material::new()
                .with_albedo(0.29, 0.08, 0.51)
                .with_specular(0.1, 0.05, 0.15)
                .with_specular_strength(0.02)
                .with_roughness(0.95)
        );
        
        // Silk teal
        let silk_teal = scene.materials().add(
            &Material::new()
                .with_albedo(0.07, 0.66, 0.66)
                .with_specular(0.4, 0.8, 0.8)
                .with_specular_strength(0.5)
                .with_roughness(0.3)
        );
        
        // Matte coral
        let matte_coral = scene.materials().add(
            &Material::new()
                .with_albedo(0.98, 0.50, 0.45)
                .with_specular(0.3, 0.2, 0.2)
                .with_specular_strength(0.05)
                .with_roughness(0.8)
        );
        
        Self {
            rose_gold,
            copper,
            brass,
            sapphire,
            emerald,
            amethyst,
            ruby,
            marble,
            jade,
            obsidian,
            pearl_material,
            opal,
            crystal_clear,
            warm_light,
            velvet_purple,
            silk_teal,
            matte_coral,
        }
    }
}

pub(super) struct BeautifulWorld {
    sdf_classes: BeautifulSdfClasses,
    materials: BeautifulMaterials,
    light_panel: Option<ObjectUid>,
}

impl BeautifulWorld {
    #[must_use]
    pub(super) fn new(sdf_classes: BeautifulSdfClasses, materials: BeautifulMaterials) -> Self {
        Self { 
            sdf_classes, 
            materials, 
            light_panel: None,
        }
    }
    
    fn make_light_panel(&mut self, scene: &mut Container) {
        // Warm sunset light from above
        self.light_panel = Some(
            scene.add_parallelogram(
                Point::new(-0.5, 2.5, -0.5), 
                Vector::new(2.0, 0.0, 0.0), 
                Vector::new(0.0, 0.0, 1.5), 
                self.materials.warm_light
            )
        );
    }
    
    pub(super) fn load_zen_garden_scene(&mut self, scene: &mut Container) {
        scene.clear_objects();
        
        // Light source
        self.make_light_panel(scene);
        
        // Floor - marble platform
        scene.add_parallelogram(
            Point::new(-3.0, -1.0, -3.0), 
            Vector::new(6.0, 0.0, 0.0), 
            Vector::new(0.0, 0.0, 6.0), 
            self.materials.marble
        );
        
        // Back wall - velvet purple
        scene.add_parallelogram(
            Point::new(-3.0, -1.0, -1.5), 
            Vector::new(6.0, 0.0, 0.0), 
            Vector::new(0.0, 3.0, 0.0), 
            self.materials.velvet_purple
        );
        
        // Side wall - silk teal
        scene.add_parallelogram(
            Point::new(2.0, -1.0, -1.5), 
            Vector::new(0.0, 0.0, 3.0), 
            Vector::new(0.0, 3.0, 0.0), 
            self.materials.silk_teal
        );
        
        // Central sculpture on pedestal
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, -0.7, -0.5)) * 
              Affine::from_scale(0.3)),
            self.sdf_classes.platform.name(),
            self.materials.obsidian
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, -0.2, -0.5)) * 
              Affine::from_scale(0.35)),
            self.sdf_classes.sculpture.name(),
            self.materials.crystal_clear
        );
        
        // Floating gems around the sculpture
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.6, 0.3, -0.3)) * 
              Affine::from_angle_z(Deg(45.0)) *
              Affine::from_scale(0.1)),
            self.sdf_classes.gem.name(),
            self.materials.ruby
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.5, 0.2, -0.4)) * 
              Affine::from_angle_z(Deg(-30.0)) *
              Affine::from_scale(0.08)),
            self.sdf_classes.gem.name(),
            self.materials.emerald
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, 0.5, -0.8)) * 
              Affine::from_angle_x(Deg(15.0)) *
              Affine::from_scale(0.12)),
            self.sdf_classes.gem.name(),
            self.materials.sapphire
        );
        
        // Pearl on the left
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-1.2, -0.6, -0.6)) * 
              Affine::from_scale(0.15)),
            self.sdf_classes.pearl.name(),
            self.materials.pearl_material
        );
        
        // Rose gold ring floating
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(1.0, 0.0, -0.7)) * 
              Affine::from_angle_y(Deg(30.0)) *
              Affine::from_angle_x(Deg(60.0)) *
              Affine::from_scale(0.2)),
            self.sdf_classes.ring.name(),
            self.materials.rose_gold
        );
        
        // Decorative pebbles
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.8, -0.85, 0.2)) * 
              Affine::from_scale(0.15)),
            self.sdf_classes.pebble.name(),
            self.materials.jade
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(1.3, -0.9, 0.3)) * 
              Affine::from_angle_y(Deg(45.0)) *
              Affine::from_scale(0.1)),
            self.sdf_classes.pebble.name(),
            self.materials.obsidian
        );
        
        // Coral accent
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-1.5, -0.7, 0.0)) * 
              Affine::from_angle_z(Deg(10.0)) *
              Affine::from_scale(0.12)),
            self.sdf_classes.coral.name(),
            self.materials.matte_coral
        );
        
        // Floating crystal
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.3, 0.8, -1.0)) * 
              Affine::from_angle_x(Deg(30.0)) *
              Affine::from_angle_y(Deg(45.0)) *
              Affine::from_scale(0.15)),
            self.sdf_classes.crystal.name(),
            self.materials.amethyst
        );
        
        // Copper flower
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(1.5, -0.5, -0.9)) * 
              Affine::from_scale(0.2)),
            self.sdf_classes.flower_base.name(),
            self.materials.copper
        );
        
        // Shell decoration
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.3, -0.9, 0.5)) * 
              Affine::from_angle_y(Deg(90.0)) *
              Affine::from_scale(0.15)),
            self.sdf_classes.shell.name(),
            self.materials.opal
        );
    }
    
    pub(super) fn load_crystal_palace_scene(&mut self, scene: &mut Container) {
        scene.clear_objects();
        
        // Light source
        self.make_light_panel(scene);
        
        // Floor - obsidian
        scene.add_parallelogram(
            Point::new(-3.0, -1.0, -3.0), 
            Vector::new(6.0, 0.0, 0.0), 
            Vector::new(0.0, 0.0, 6.0), 
            self.materials.obsidian
        );
        
        // Pillars
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-1.5, 0.0, -1.0)) * 
              Affine::from_scale(0.3)),
            self.sdf_classes.pillar.name(),
            self.materials.marble
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(1.5, 0.0, -1.0)) * 
              Affine::from_scale(0.3)),
            self.sdf_classes.pillar.name(),
            self.materials.marble
        );
        
        // Central arch
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, 0.5, -1.0)) * 
              Affine::from_scale(0.5)),
            self.sdf_classes.arch.name(),
            self.materials.brass
        );
        
        // Crystal formations
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, -0.5, -0.5)) * 
              Affine::from_angle_z(Deg(180.0)) *
              Affine::from_scale(0.4)),
            self.sdf_classes.crystal.name(),
            self.materials.crystal_clear
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.8, -0.6, -0.3)) * 
              Affine::from_angle_z(Deg(160.0)) *
              Affine::from_angle_x(Deg(20.0)) *
              Affine::from_scale(0.25)),
            self.sdf_classes.crystal.name(),
            self.materials.amethyst
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.7, -0.7, -0.4)) * 
              Affine::from_angle_z(Deg(200.0)) *
              Affine::from_angle_x(Deg(-15.0)) *
              Affine::from_scale(0.3)),
            self.sdf_classes.crystal.name(),
            self.materials.emerald
        );
        
        // Floating gems
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, 1.2, -0.8)) * 
              Affine::from_angle_y(Deg(45.0)) *
              Affine::from_scale(0.2)),
            self.sdf_classes.sculpture.name(),
            self.materials.ruby
        );
        
        // Decorative elements
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-2.0, -0.8, 0.5)) * 
              Affine::from_scale(0.1)),
            self.sdf_classes.pearl.name(),
            self.materials.pearl_material
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(2.0, -0.8, 0.5)) * 
              Affine::from_scale(0.1)),
            self.sdf_classes.pearl.name(),
            self.materials.pearl_material
        );
        
        // Rose gold accents
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, 0.0, 0.2)) * 
              Affine::from_angle_y(Deg(90.0)) *
              Affine::from_scale(0.15)),
            self.sdf_classes.ring.name(),
            self.materials.rose_gold
        );
    }
    
    pub(super) fn load_underwater_treasure_scene(&mut self, scene: &mut Container) {
        scene.clear_objects();
        
        // Light source with blue tint
        self.make_light_panel(scene);
        
        // Ocean floor - jade
        scene.add_parallelogram(
            Point::new(-3.0, -1.0, -3.0), 
            Vector::new(6.0, 0.0, 0.0), 
            Vector::new(0.0, 0.0, 6.0), 
            self.materials.jade
        );
        
        // Back wall - deep blue
        scene.add_parallelogram(
            Point::new(-3.0, -1.0, -1.5), 
            Vector::new(6.0, 0.0, 0.0), 
            Vector::new(0.0, 3.0, 0.0), 
            self.materials.silk_teal
        );
        
        // Coral formations
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-1.2, -0.5, -0.8)) * 
              Affine::from_angle_z(Deg(-15.0)) *
              Affine::from_scale(0.2)),
            self.sdf_classes.coral.name(),
            self.materials.matte_coral
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.8, -0.6, -0.6)) * 
              Affine::from_angle_z(Deg(10.0)) *
              Affine::from_scale(0.15)),
            self.sdf_classes.coral.name(),
            self.materials.copper
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(1.3, -0.7, -0.7)) * 
              Affine::from_angle_z(Deg(20.0)) *
              Affine::from_scale(0.18)),
            self.sdf_classes.coral.name(),
            self.materials.rose_gold
        );
        
        // Treasure chest (box with gems)
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, -0.8, -0.5)) * 
              Affine::from_angle_y(Deg(30.0)) *
              Affine::from_scale(0.3)),
            self.sdf_classes.platform.name(),
            self.materials.brass
        );
        
        // Gems spilling out
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.2, -0.75, -0.3)) * 
              Affine::from_scale(0.08)),
            self.sdf_classes.gem.name(),
            self.materials.ruby
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.1, -0.78, -0.4)) * 
              Affine::from_angle_z(Deg(90.0)) *
              Affine::from_scale(0.06)),
            self.sdf_classes.gem.name(),
            self.materials.emerald
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.1, -0.76, -0.2)) * 
              Affine::from_angle_x(Deg(45.0)) *
              Affine::from_scale(0.07)),
            self.sdf_classes.gem.name(),
            self.materials.sapphire
        );
        
        // Pearls scattered
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.5, -0.9, -0.2)) * 
              Affine::from_scale(0.05)),
            self.sdf_classes.pearl.name(),
            self.materials.pearl_material
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.4, -0.88, -0.1)) * 
              Affine::from_scale(0.06)),
            self.sdf_classes.pearl.name(),
            self.materials.pearl_material
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.2, -0.92, 0.1)) * 
              Affine::from_scale(0.04)),
            self.sdf_classes.pearl.name(),
            self.materials.opal
        );
        
        // Floating jellyfish-like crystal
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.8, 0.3, -0.8)) * 
              Affine::from_scale(0.25)),
            self.sdf_classes.flower_base.name(),
            self.materials.crystal_clear
        );
        
        // Shells
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.7, -0.95, 0.3)) * 
              Affine::from_angle_y(Deg(45.0)) *
              Affine::from_scale(0.1)),
            self.sdf_classes.shell.name(),
            self.materials.opal
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.9, -0.93, 0.2)) * 
              Affine::from_angle_y(Deg(-30.0)) *
              Affine::from_scale(0.12)),
            self.sdf_classes.shell.name(),
            self.materials.pearl_material
        );
        
        // Floating bubbles (glass spheres)
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(-0.3, 0.5, -0.5)) * 
              Affine::from_scale(0.1)),
            self.sdf_classes.pearl.name(),
            self.materials.crystal_clear
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.5, 0.8, -0.7)) * 
              Affine::from_scale(0.08)),
            self.sdf_classes.pearl.name(),
            self.materials.crystal_clear
        );
        
        scene.add_sdf(
            &(Affine::from_translation(Vector::new(0.0, 1.0, -0.9)) * 
              Affine::from_scale(0.06)),
            self.sdf_classes.pearl.name(),
            self.materials.crystal_clear
        );
    }
}